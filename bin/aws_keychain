#!/usr/bin/env ruby

# Copyright (c) 2012 Ryan J. Geyer
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'trollop'
require 'logger'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'aws_keychain'))

opts = Trollop::options do
  banner = "Stores AWS Creds and can be used to spit those creds out into useful file formats for AWS CLI tools"

  opt :keychain, "A full or relative path to your keychain file", :type => :string, :default => "aws_keychain.json"
  opt :keyname, "The name of a key to perform an action with", :type => :string
  opt :action, "The name of the action to perform.  See --list_actions for a list of available actions", :type => :string
  opt :output, "A full or relative path to a target file for the output", :type => :string
  opt :list_actions, "List the available actions to perform on a key"
  opt :list_keys, "Lists all of the available credentials in the keychain"
  opt :quiet, "Removes any ancillary output and provides only the output of the action"
end

class SilentLogger
  def method_missing(sym, *args, &block)
    # Do nothing..
  end
end

log = opts[:quiet] ? SilentLogger.new() : Logger.new(STDOUT)

plugins = {}
actions = []
AwsKeychain::Plugin.constants.each do |plugin_class|
  plugin_class = AwsKeychain::Plugin.const_get(plugin_class)
  plugin = plugin_class.new(opts)
  plugins[plugin.short_name] = plugin

  plugin.actions.each do |action|
    actions << "#{plugin.short_name}-#{action}"
  end
end

if opts[:list_actions]
  log.info "All available actions listed below"
  puts actions
end

# This stuff requires a valid keychain file
if opts[:action] || opts[:list_keys]
  keychain = AwsKeychain::Keychain.new(:keychain_file => opts[:keychain])

  if opts[:action]
    matches = /^([\w]*)-(.*)$/.match(opts[:action])
    unless actions.include?(opts[:action]) && matches && matches.length == 3
      log.fatal "The action #{opts[:action]} is invalid, try one of the following #{actions}"
      exit 1
    end

    # TODO: Validate that the key exists
    key = keychain[opts[:keyname]]

    dyn_method = plugins[matches[1]].method(matches[2])
    dyn_method.call(key) do |content|
      if opts[:output]
        File.open(opts[:output], 'w') do |file|
          log.info("Writing the output of (#{opts[:action]}) to #{opts[:output]}")
          file.write(content)
        end
      else
        log.info("Action (#{opts[:action]}) produced the following output.")
        puts content
      end
    end
  end

  if opts[:list_keys]
    log.info "All available keys in the keychain listed below"
    puts keychain.list
  end
end